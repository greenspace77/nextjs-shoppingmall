// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output   = "./prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}


model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  password  String?  // 소셜로그인 시 null 가능
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
}

model Product {
  id          Int   @id @default(autoincrement())
  name        String
  description String
  price       Int
  stock       Int
  vector      Unsupported("vector")?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]
}

model Order {
  id          Int   @id @default(autoincrement())
  user        User  @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id         Int   @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id            Int   @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int   @unique
  paymentMethod String
  amount        Float
  status        PaymentStatus
  transactionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentStatus {
  WAITING
  PAID
  FAILED
}